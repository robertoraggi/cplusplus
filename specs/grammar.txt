typedef-name:
    identifier
    simple-template-id

namespace-name:
    identifier
    namespace-alias

namespace-alias:
    identifier

class-name:
    identifier
    simple-template-id

enum-name:
    identifier

template-name:
    identifier

hex-quad:
    hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit

universal-character-name:
    \u hex-quad
    \U hex-quad hex-quad

preprocessing-token:
    header-name
    import-keyword
    module-keyword
    export-keyword
    identifier
    pp-number
    character-literal
    user-defined-character-literal
    string-literal
    user-defined-string-literal
    preprocessing-op-or-punc
    each non-white-space character that cannot be one of the above

token:
    identifier
    keyword
    literal
    operator-or-punctuator

header-name:
    < h-char-sequence >
    " q-char-sequence "

h-char-sequence:
    h-char
    h-char-sequence h-char

h-char:
    any member of the source character set except new-line and >

q-char-sequence:
    q-char
    q-char-sequence q-char

q-char:
    any member of the source character set except new-line and "

pp-number:
    digit
    . digit
    pp-number digit
    pp-number identifier-nondigit
    pp-number ' digit
    pp-number ' nondigit
    pp-number e sign
    pp-number E sign
    pp-number p sign
    pp-number P sign
    pp-number .

identifier:
    identifier-nondigit
    identifier identifier-nondigit
    identifier digit

identifier-nondigit:
    nondigit
    universal-character-name

nondigit: one of
    a b c d e f g h i j k l m
    n o p q r s t u v w x y z
    A B C D E F G H I J K L M
    N O P Q R S T U V W X Y Z _

digit: one of
    0 1 2 3 4 5 6 7 8 9

keyword:
    any identifier listed in Table tab:lex.key
    import-keyword
    module-keyword
    export-keyword

preprocessing-op-or-punc:
    preprocessing-operator
    operator-or-punctuator

preprocessing-operator: one of
    #        ##       %:       %:%:

operator-or-punctuator: one of
    {        }        [        ]        (        )
    <:       :>       <%       %>       ;        :        ...
    ?        ::       .        .*       ->       ->*      ~
    !        +        -        *        /        %        ^        &        |
    =        +=       -=       *=       /=       %=       ^=       &=       |=
    ==       !=       <        >        <=       >=       <=>      &&       ||
    <<       >>       <<=      >>=      ++       --       ,
    and      or       xor      not      bitand   bitor    compl
    and_eq   or_eq    xor_eq   not_eq

literal:
    integer-literal
    character-literal
    floating-point-literal
    string-literal
    boolean-literal
    pointer-literal
    user-defined-literal

integer-literal:
    binary-literal integer-suffix-opt
    octal-literal integer-suffix-opt
    decimal-literal integer-suffix-opt
    hexadecimal-literal integer-suffix-opt

binary-literal:
    0b binary-digit
    0B binary-digit
    binary-literal '-opt binary-digit

octal-literal:
    0
    octal-literal '-opt octal-digit

decimal-literal:
    nonzero-digit
    decimal-literal '-opt digit

hexadecimal-literal:
    hexadecimal-prefix hexadecimal-digit-sequence

binary-digit: one of
    0  1

octal-digit: one of
    0  1  2  3  4  5  6  7

nonzero-digit: one of
    1  2  3  4  5  6  7  8  9

hexadecimal-prefix: one of
    0x  0X

hexadecimal-digit-sequence:
    hexadecimal-digit
    hexadecimal-digit-sequence '-opt hexadecimal-digit

hexadecimal-digit: one of
    0  1  2  3  4  5  6  7  8  9
    a  b  c  d  e  f
    A  B  C  D  E  F

integer-suffix:
    unsigned-suffix long-suffix-opt
    unsigned-suffix long-long-suffix-opt
    long-suffix unsigned-suffix-opt
    long-long-suffix unsigned-suffix-opt

unsigned-suffix: one of
    u  U

long-suffix: one of
    l  L

long-long-suffix: one of
    ll  LL

character-literal:
    encoding-prefix-opt ' c-char-sequence '

encoding-prefix: one of
    u8      u      U      L

c-char-sequence:
    c-char
    c-char-sequence c-char

c-char:
    any member of the basic source character set except the single-quote ', backslash \, or new-line character
    escape-sequence
    universal-character-name

escape-sequence:
    simple-escape-sequence
    octal-escape-sequence
    hexadecimal-escape-sequence

simple-escape-sequence: one of
    \'      \"      \?      \\
    \a      \b      \f      \n      \r      \t      \v

octal-escape-sequence:
    \ octal-digit
    \ octal-digit octal-digit
    \ octal-digit octal-digit octal-digit

hexadecimal-escape-sequence:
    \x hexadecimal-digit
    hexadecimal-escape-sequence hexadecimal-digit

floating-point-literal:
    decimal-floating-point-literal
    hexadecimal-floating-point-literal

decimal-floating-point-literal:
    fractional-constant exponent-part-opt floating-point-suffix-opt
    digit-sequence exponent-part floating-point-suffix-opt

hexadecimal-floating-point-literal:
    hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part floating-point-suffix-opt
    hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part floating-point-suffix-opt

fractional-constant:
    digit-sequence-opt
    . digit-sequence
    digit-sequence .

hexadecimal-fractional-constant:
    hexadecimal-digit-sequence-opt
    . hexadecimal-digit-sequence
    hexadecimal-digit-sequence .

exponent-part:
    e sign-opt digit-sequence
    E sign-opt digit-sequence

binary-exponent-part:
    p sign-opt digit-sequence
    P sign-opt digit-sequence

sign: one of
    +  -

digit-sequence:
    digit
    digit-sequence '-opt digit

floating-point-suffix: one of
    f  l  F  L

string-literal:
    encoding-prefix-opt " s-char-sequence-opt "
    encoding-prefix-opt R raw-string

s-char-sequence:
    s-char
    s-char-sequence s-char

s-char:
    any member of the basic source character set except the double-quote ", backslash \, or new-line character
    escape-sequence
    universal-character-name

raw-string:
    " d-char-sequence-opt ( r-char-sequence-opt ) d-char-sequence-opt "

r-char-sequence:
    r-char
    r-char-sequence r-char

r-char:
    any member of the source character set, except a right parenthesis ) followed by
        the initial d-char-sequence (which may be empty) followed by a double quote ".

d-char-sequence:
    d-char
    d-char-sequence d-char

d-char:
    any member of the basic source character set except:
        space, the left parenthesis (, the right parenthesis ), the backslash \, and the control characters
        representing horizontal tab, vertical tab, form feed, and newline.

boolean-literal:
    false
    true

pointer-literal:
    nullptr

user-defined-literal:
    user-defined-integer-literal
    user-defined-floating-point-literal
    user-defined-string-literal
    user-defined-character-literal

user-defined-integer-literal:
    decimal-literal ud-suffix
    octal-literal ud-suffix
    hexadecimal-literal ud-suffix
    binary-literal ud-suffix

user-defined-floating-point-literal:
    fractional-constant exponent-part-opt ud-suffix
    digit-sequence exponent-part ud-suffix
    hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part ud-suffix
    hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part ud-suffix

user-defined-string-literal:
    string-literal ud-suffix

user-defined-character-literal:
    character-literal ud-suffix

ud-suffix:
    identifier

translation-unit:
    declaration-seq-opt
    global-module-fragment-opt module-declaration declaration-seq-opt private-module-fragment-opt

primary-expression:
    literal
    this
    ( expression )
    id-expression
    lambda-expression
    fold-expression
    requires-expression

id-expression:
    unqualified-id
    qualified-id

unqualified-id:
    identifier
    operator-function-id
    conversion-function-id
    literal-operator-id
    ~ type-name
    ~ decltype-specifier
    template-id

qualified-id:
    nested-name-specifier template-opt unqualified-id

nested-name-specifier:
    ::
    type-name ::
    namespace-name ::
    decltype-specifier ::
    nested-name-specifier identifier ::
    nested-name-specifier template-opt simple-template-id ::

lambda-expression:
    lambda-introducer                                                 lambda-declarator-opt compound-statement
    lambda-introducer < template-parameter-list > requires-clause-opt lambda-declarator-opt compound-statement

lambda-introducer:
    [ lambda-capture-opt ]

lambda-declarator:
    ( parameter-declaration-clause ) decl-specifier-seq-opt noexcept-specifier-opt attribute-specifier-seq-opt trailing-return-type-opt requires-clause-opt

lambda-capture:
    capture-default
    capture-list
    capture-default , capture-list

capture-default:
    &
    =

capture-list:
    capture
    capture-list , capture

capture:
    simple-capture
    init-capture

simple-capture:
    identifier ...-opt
    & identifier ...-opt
    this
    * this

init-capture:
    ...-opt identifier initializer
    & ...-opt identifier initializer

fold-expression:
    ( cast-expression fold-operator ... )
    ( ... fold-operator cast-expression )
    ( cast-expression fold-operator ... fold-operator cast-expression )

fold-operator: one of
    +       -       *       /       %       ^       &       |       <<       >>
    +=      -=      *=      /=      %=      ^=      &=      |=      <<=      >>=      =
    ==      !=      <       >       <=      >=      &&      ||      ,        .*       ->*

requires-expression:
    requires requirement-parameter-list-opt requirement-body

requirement-parameter-list:
    ( parameter-declaration-clause-opt )

requirement-body:
    { requirement-seq }

requirement-seq:
    requirement
    requirement-seq requirement

requirement:
    simple-requirement
    type-requirement
    compound-requirement
    nested-requirement

simple-requirement:
    expression ;

type-requirement:
    typename nested-name-specifier-opt type-name ;

compound-requirement:
    { expression } noexcept-opt return-type-requirement-opt ;

return-type-requirement:
    -> type-constraint

nested-requirement:
    requires constraint-expression ;

postfix-expression:
    primary-expression
    postfix-expression [ expr-or-braced-init-list ]
    postfix-expression ( expression-list-opt )
    simple-type-specifier ( expression-list-opt )
    typename-specifier ( expression-list-opt )
    simple-type-specifier braced-init-list
    typename-specifier braced-init-list
    postfix-expression . template-opt id-expression
    postfix-expression -> template-opt id-expression
    postfix-expression ++
    postfix-expression --
    dynamic_cast < type-id > ( expression )
    static_cast < type-id > ( expression )
    reinterpret_cast < type-id > ( expression )
    const_cast < type-id > ( expression )
    typeid ( expression )
    typeid ( type-id )

expression-list:
    initializer-list

unary-expression:
    postfix-expression
    unary-operator cast-expression
    ++ cast-expression
    -- cast-expression
    await-expression
    sizeof unary-expression
    sizeof ( type-id )
    sizeof ... ( identifier )
    alignof ( type-id )
    noexcept-expression
    new-expression
    delete-expression

unary-operator: one of
    *  &  +  -  !  ~

await-expression:
    co_await cast-expression

noexcept-expression:
    noexcept ( expression )

new-expression:
    ::-opt new new-placement-opt new-type-id new-initializer-opt
    ::-opt new new-placement-opt ( type-id ) new-initializer-opt

new-placement:
    ( expression-list )

new-type-id:
    type-specifier-seq new-declarator-opt

new-declarator:
    ptr-operator new-declarator-opt
    noptr-new-declarator

noptr-new-declarator:
    [ expression-opt ] attribute-specifier-seq-opt
    noptr-new-declarator [ constant-expression ] attribute-specifier-seq-opt

new-initializer:
    ( expression-list-opt )
    braced-init-list

delete-expression:
    ::-opt delete cast-expression
    ::-opt delete [ ] cast-expression

cast-expression:
    unary-expression
    ( type-id ) cast-expression

pm-expression:
    cast-expression
    pm-expression .* cast-expression
    pm-expression ->* cast-expression

multiplicative-expression:
    pm-expression
    multiplicative-expression * pm-expression
    multiplicative-expression / pm-expression
    multiplicative-expression % pm-expression

additive-expression:
    multiplicative-expression
    additive-expression + multiplicative-expression
    additive-expression - multiplicative-expression

shift-expression:
    additive-expression
    shift-expression << additive-expression
    shift-expression >> additive-expression

compare-expression:
    shift-expression
    compare-expression <=> shift-expression

relational-expression:
    compare-expression
    relational-expression < compare-expression
    relational-expression > compare-expression
    relational-expression <= compare-expression
    relational-expression >= compare-expression

equality-expression:
    relational-expression
    equality-expression == relational-expression
    equality-expression != relational-expression

and-expression:
    equality-expression
    and-expression & equality-expression

exclusive-or-expression:
    and-expression
    exclusive-or-expression ^ and-expression

inclusive-or-expression:
    exclusive-or-expression
    inclusive-or-expression | exclusive-or-expression

logical-and-expression:
    inclusive-or-expression
    logical-and-expression && inclusive-or-expression

logical-or-expression:
    logical-and-expression
    logical-or-expression || logical-and-expression

conditional-expression:
    logical-or-expression
    logical-or-expression ? expression : assignment-expression

yield-expression:
    co_yield assignment-expression
    co_yield braced-init-list

throw-expression:
    throw assignment-expression-opt

assignment-expression:
    conditional-expression
    yield-expression
    throw-expression
    logical-or-expression assignment-operator initializer-clause

assignment-operator: one of
    =  *=  /=  %=   +=  -=  >>=  <<=  &=  ^=  |=

expression:
    assignment-expression
    expression , assignment-expression

constant-expression:
    conditional-expression

statement:
    labeled-statement
    attribute-specifier-seq-opt expression-statement
    attribute-specifier-seq-opt compound-statement
    attribute-specifier-seq-opt selection-statement
    attribute-specifier-seq-opt iteration-statement
    attribute-specifier-seq-opt jump-statement
    declaration-statement
    attribute-specifier-seq-opt try-block

init-statement:
    expression-statement
    simple-declaration

condition:
    expression
    attribute-specifier-seq-opt decl-specifier-seq declarator brace-or-equal-initializer

labeled-statement:
    attribute-specifier-seq-opt identifier : statement
    attribute-specifier-seq-opt case constant-expression : statement
    attribute-specifier-seq-opt default : statement

expression-statement:
    expression-opt ;

compound-statement:
    { statement-seq-opt }

statement-seq:
    statement
    statement-seq statement

selection-statement:
    if constexpr-opt ( init-statement-opt condition ) statement
    if constexpr-opt ( init-statement-opt condition ) statement else statement
    switch ( init-statement-opt condition ) statement

iteration-statement:
    while ( condition ) statement
    do statement while ( expression ) ;
    for ( init-statement condition-opt ; expression-opt ) statement
    for ( init-statement-opt for-range-declaration : for-range-initializer ) statement

for-range-declaration:
    attribute-specifier-seq-opt decl-specifier-seq declarator
    attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt [ identifier-list ]

for-range-initializer:
    expr-or-braced-init-list

jump-statement:
    break ;
    continue ;
    return expr-or-braced-init-list-opt ;
    coroutine-return-statement
    goto identifier ;

coroutine-return-statement:
    co_return expr-or-braced-init-list-opt ;

declaration-statement:
    block-declaration

declaration-seq:
    declaration
    declaration-seq declaration

declaration:
    block-declaration
    nodeclspec-function-declaration
    function-definition
    template-declaration
    deduction-guide
    explicit-instantiation
    explicit-specialization
    export-declaration
    linkage-specification
    namespace-definition
    empty-declaration
    attribute-declaration
    module-import-declaration

block-declaration:
    simple-declaration
    asm-declaration
    namespace-alias-definition
    using-declaration
    using-enum-declaration
    using-directive
    static_assert-declaration
    alias-declaration
    opaque-enum-declaration

nodeclspec-function-declaration:
    attribute-specifier-seq-opt declarator ;

alias-declaration:
    using identifier attribute-specifier-seq-opt = defining-type-id ;

simple-declaration:
    decl-specifier-seq init-declarator-list-opt ;
    attribute-specifier-seq decl-specifier-seq init-declarator-list ;
    attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt [ identifier-list ] initializer ;

static_assert-declaration:
    static_assert ( constant-expression ) ;
    static_assert ( constant-expression , string-literal ) ;

empty-declaration:
    ;

attribute-declaration:
    attribute-specifier-seq ;

decl-specifier:
    storage-class-specifier
    defining-type-specifier
    function-specifier
    friend
    typedef
    constexpr
    consteval
    constinit
    inline

decl-specifier-seq:
    decl-specifier attribute-specifier-seq-opt
    decl-specifier decl-specifier-seq

storage-class-specifier:
    static
    thread_local
    extern
    mutable

function-specifier:
    virtual
    explicit-specifier

explicit-specifier:
    explicit ( constant-expression )
    explicit

type-specifier:
    simple-type-specifier
    elaborated-type-specifier
    typename-specifier
    cv-qualifier

type-specifier-seq:
    type-specifier attribute-specifier-seq-opt
    type-specifier type-specifier-seq

defining-type-specifier:
    type-specifier
    class-specifier
    enum-specifier

defining-type-specifier-seq:
    defining-type-specifier attribute-specifier-seq-opt
    defining-type-specifier defining-type-specifier-seq

simple-type-specifier:
    nested-name-specifier-opt type-name
    nested-name-specifier template simple-template-id
    decltype-specifier
    placeholder-type-specifier
    nested-name-specifier-opt template-name
    char
    char8_t
    char16_t
    char32_t
    wchar_t
    bool
    short
    int
    long
    signed
    unsigned
    float
    double
    void

type-name:
    class-name
    enum-name
    typedef-name

elaborated-type-specifier:
    class-key attribute-specifier-seq-opt nested-name-specifier-opt identifier
    class-key simple-template-id
    class-key nested-name-specifier template-opt simple-template-id
    elaborated-enum-specifier

elaborated-enum-specifier:
    enum nested-name-specifier-opt identifier

decltype-specifier:
    decltype ( expression )

placeholder-type-specifier:
    type-constraint-opt auto
    type-constraint-opt decltype ( auto )

init-declarator-list:
    init-declarator
    init-declarator-list , init-declarator

init-declarator:
    declarator initializer-opt
    declarator requires-clause

declarator:
    ptr-declarator
    noptr-declarator parameters-and-qualifiers trailing-return-type

ptr-declarator:
    noptr-declarator
    ptr-operator ptr-declarator

noptr-declarator:
    declarator-id attribute-specifier-seq-opt
    noptr-declarator parameters-and-qualifiers
    noptr-declarator [ constant-expression-opt ] attribute-specifier-seq-opt
    ( ptr-declarator )

parameters-and-qualifiers:
    ( parameter-declaration-clause ) cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt

trailing-return-type:
    -> type-id

ptr-operator:
    * attribute-specifier-seq-opt cv-qualifier-seq-opt
    & attribute-specifier-seq-opt
    && attribute-specifier-seq-opt
    nested-name-specifier * attribute-specifier-seq-opt cv-qualifier-seq-opt

cv-qualifier-seq:
    cv-qualifier cv-qualifier-seq-opt

cv-qualifier:
    const
    volatile

ref-qualifier:
    &
    &&

declarator-id:
    ...-opt id-expression

type-id:
    type-specifier-seq abstract-declarator-opt

defining-type-id:
    defining-type-specifier-seq abstract-declarator-opt

abstract-declarator:
    ptr-abstract-declarator
    noptr-abstract-declarator-opt parameters-and-qualifiers trailing-return-type
    abstract-pack-declarator

ptr-abstract-declarator:
    noptr-abstract-declarator
    ptr-operator ptr-abstract-declarator-opt

noptr-abstract-declarator:
    noptr-abstract-declarator-opt parameters-and-qualifiers
    noptr-abstract-declarator-opt [ constant-expression-opt ] attribute-specifier-seq-opt
    ( ptr-abstract-declarator )

abstract-pack-declarator:
    noptr-abstract-pack-declarator
    ptr-operator abstract-pack-declarator

noptr-abstract-pack-declarator:
    noptr-abstract-pack-declarator parameters-and-qualifiers
    noptr-abstract-pack-declarator [ constant-expression-opt ] attribute-specifier-seq-opt
    ...

parameter-declaration-clause:
    parameter-declaration-list-opt ...-opt
    parameter-declaration-list , ...

parameter-declaration-list:
    parameter-declaration
    parameter-declaration-list , parameter-declaration

parameter-declaration:
    attribute-specifier-seq-opt decl-specifier-seq declarator
    attribute-specifier-seq-opt decl-specifier-seq declarator = initializer-clause
    attribute-specifier-seq-opt decl-specifier-seq abstract-declarator-opt
    attribute-specifier-seq-opt decl-specifier-seq abstract-declarator-opt = initializer-clause

initializer:
    brace-or-equal-initializer
    ( expression-list )

brace-or-equal-initializer:
    = initializer-clause
    braced-init-list

initializer-clause:
    assignment-expression
    braced-init-list

braced-init-list:
    { initializer-list ,-opt }
    { designated-initializer-list ,-opt }
    { }

initializer-list:
    initializer-clause ...-opt
    initializer-list , initializer-clause ...-opt

designated-initializer-list:
    designated-initializer-clause
    designated-initializer-list , designated-initializer-clause

designated-initializer-clause:
    designator brace-or-equal-initializer

designator:
    . identifier

expr-or-braced-init-list:
    expression
    braced-init-list

function-definition:
    attribute-specifier-seq-opt decl-specifier-seq-opt declarator virt-specifier-seq-opt function-body
    attribute-specifier-seq-opt decl-specifier-seq-opt declarator requires-clause function-body

function-body:
    ctor-initializer-opt compound-statement
    function-try-block
    = default ;
    = delete ;

enum-specifier:
    enum-head { enumerator-list-opt }
    enum-head { enumerator-list , }

enum-head:
    enum-key attribute-specifier-seq-opt enum-head-name-opt enum-base-opt

enum-head-name:
    nested-name-specifier-opt identifier

opaque-enum-declaration:
    enum-key attribute-specifier-seq-opt enum-head-name enum-base-opt ;

enum-key:
    enum
    enum class
    enum struct

enum-base:
    : type-specifier-seq

enumerator-list:
    enumerator-definition
    enumerator-list , enumerator-definition

enumerator-definition:
    enumerator
    enumerator = constant-expression

enumerator:
    identifier attribute-specifier-seq-opt

using-enum-declaration:
    using elaborated-enum-specifier ;

namespace-definition:
    named-namespace-definition
    unnamed-namespace-definition
    nested-namespace-definition

named-namespace-definition:
    inline-opt namespace attribute-specifier-seq-opt identifier { namespace-body }

unnamed-namespace-definition:
    inline-opt namespace attribute-specifier-seq-opt { namespace-body }

nested-namespace-definition:
    namespace enclosing-namespace-specifier :: inline-opt identifier { namespace-body }

enclosing-namespace-specifier:
    identifier
    enclosing-namespace-specifier :: inline-opt identifier

namespace-body:
    declaration-seq-opt

namespace-alias-definition:
    namespace identifier = qualified-namespace-specifier ;

qualified-namespace-specifier:
    nested-name-specifier-opt namespace-name

using-directive:
    attribute-specifier-seq-opt using namespace nested-name-specifier-opt namespace-name ;

using-declaration:
    using using-declarator-list ;

using-declarator-list:
    using-declarator ...-opt
    using-declarator-list , using-declarator ...-opt

using-declarator:
    typename-opt nested-name-specifier unqualified-id

asm-declaration:
    attribute-specifier-seq-opt asm ( string-literal ) ;

linkage-specification:
    extern string-literal { declaration-seq-opt }
    extern string-literal declaration

attribute-specifier-seq:
    attribute-specifier-seq-opt attribute-specifier

attribute-specifier:
    [ [ attribute-using-prefix-opt attribute-list ] ]
    alignment-specifier

alignment-specifier:
    alignas ( type-id ...-opt )
    alignas ( constant-expression ...-opt )

attribute-using-prefix:
    using attribute-namespace :

attribute-list:
    attribute-opt
    attribute-list , attribute-opt
    attribute ...
    attribute-list , attribute ...

attribute:
    attribute-token attribute-argument-clause-opt

attribute-token:
    identifier
    attribute-scoped-token

attribute-scoped-token:
    attribute-namespace :: identifier

attribute-namespace:
    identifier

attribute-argument-clause:
    ( balanced-token-seq-opt )

balanced-token-seq:
    balanced-token
    balanced-token-seq balanced-token

balanced-token:
    ( balanced-token-seq-opt )
    [ balanced-token-seq-opt ]
    { balanced-token-seq-opt }
    any token other than a parenthesis, a bracket, or a brace

module-declaration:
    export-keyword-opt module-keyword module-name module-partition-opt attribute-specifier-seq-opt ;

module-name:
    module-name-qualifier-opt identifier

module-partition:
    : module-name-qualifier-opt identifier

module-name-qualifier:
    identifier .
    module-name-qualifier identifier .

export-declaration:
    export declaration
    export { declaration-seq-opt }
    export-keyword module-import-declaration

module-import-declaration:
    import-keyword module-name attribute-specifier-seq-opt ;
    import-keyword module-partition attribute-specifier-seq-opt ;
    import-keyword header-name attribute-specifier-seq-opt ;

global-module-fragment:
    module-keyword ; declaration-seq-opt

private-module-fragment:
    module-keyword : private ; declaration-seq-opt

class-specifier:
    class-head { member-specification-opt }

class-head:
    class-key attribute-specifier-seq-opt class-head-name class-virt-specifier-opt base-clause-opt
    class-key attribute-specifier-seq-opt base-clause-opt

class-head-name:
    nested-name-specifier-opt class-name

class-virt-specifier:
    final

class-key:
    class
    struct
    union

member-specification:
    member-declaration member-specification-opt
    access-specifier : member-specification-opt

member-declaration:
    attribute-specifier-seq-opt decl-specifier-seq-opt member-declarator-list-opt ;
    function-definition
    using-declaration
    using-enum-declaration
    static_assert-declaration
    template-declaration
    explicit-specialization
    deduction-guide
    alias-declaration
    opaque-enum-declaration
    empty-declaration

member-declarator-list:
    member-declarator
    member-declarator-list , member-declarator

member-declarator:
    declarator virt-specifier-seq-opt pure-specifier-opt
    declarator requires-clause
    declarator brace-or-equal-initializer-opt
    identifier-opt attribute-specifier-seq-opt : constant-expression brace-or-equal-initializer-opt

virt-specifier-seq:
    virt-specifier
    virt-specifier-seq virt-specifier

virt-specifier:
    override
    final

pure-specifier:
    = 0

conversion-function-id:
    operator conversion-type-id

conversion-type-id:
    type-specifier-seq conversion-declarator-opt

conversion-declarator:
    ptr-operator conversion-declarator-opt

base-clause:
    : base-specifier-list

base-specifier-list:
    base-specifier ...-opt
    base-specifier-list , base-specifier ...-opt

base-specifier:
    attribute-specifier-seq-opt class-or-decltype
    attribute-specifier-seq-opt virtual access-specifier-opt class-or-decltype
    attribute-specifier-seq-opt access-specifier virtual-opt class-or-decltype

class-or-decltype:
    nested-name-specifier-opt type-name
    nested-name-specifier template simple-template-id
    decltype-specifier

access-specifier:
    private
    protected
    public

ctor-initializer:
    : mem-initializer-list

mem-initializer-list:
    mem-initializer ...-opt
    mem-initializer-list , mem-initializer ...-opt

mem-initializer:
    mem-initializer-id ( expression-list-opt )
    mem-initializer-id braced-init-list

mem-initializer-id:
    class-or-decltype
    identifier

operator-function-id:
    operator operator

operator: one of
    new      delete   new[]    delete[] co_await (   )        [   ]        ->       ->*
    ~        !        +        -        *        /        %        ^        &
    |        =        +=       -=       *=       /=       %=       ^=       &=
    |=       ==       !=       <        >        <=       >=       <=>      &&
    ||       <<       >>       <<=      >>=      ++       --       ,

literal-operator-id:
    operator string-literal identifier
    operator user-defined-string-literal

template-declaration:
    template-head declaration
    template-head concept-definition

template-head:
    template < template-parameter-list > requires-clause-opt

template-parameter-list:
    template-parameter
    template-parameter-list , template-parameter

requires-clause:
    requires constraint-logical-or-expression

constraint-logical-or-expression:
    constraint-logical-and-expression
    constraint-logical-or-expression || constraint-logical-and-expression

constraint-logical-and-expression:
    primary-expression
    constraint-logical-and-expression && primary-expression

template-parameter:
    type-parameter
    parameter-declaration

type-parameter:
    type-parameter-key ...-opt identifier-opt
    type-parameter-key identifier-opt = type-id
    type-constraint ...-opt identifier-opt
    type-constraint identifier-opt = type-id
    template-head type-parameter-key ...-opt identifier-opt
    template-head type-parameter-key identifier-opt = id-expression

type-parameter-key:
    class
    typename

type-constraint:
    nested-name-specifier-opt concept-name
    nested-name-specifier-opt concept-name < template-argument-list-opt >

simple-template-id:
    template-name < template-argument-list-opt >

template-id:
    simple-template-id
    operator-function-id < template-argument-list-opt >
    literal-operator-id < template-argument-list-opt >

template-argument-list:
    template-argument ...-opt
    template-argument-list , template-argument ...-opt

template-argument:
    constant-expression
    type-id
    id-expression

constraint-expression:
    logical-or-expression

deduction-guide:
    explicit-specifier-opt template-name ( parameter-declaration-clause ) -> simple-template-id ;

concept-definition:
    concept concept-name = constraint-expression ;

concept-name:
    identifier

typename-specifier:
    typename nested-name-specifier identifier
    typename nested-name-specifier template-opt simple-template-id

explicit-instantiation:
    extern-opt template declaration

explicit-specialization:
    template < > declaration

try-block:
    try compound-statement handler-seq

function-try-block:
    try ctor-initializer-opt compound-statement handler-seq

handler-seq:
    handler handler-seq-opt

handler:
    catch ( exception-declaration ) compound-statement

exception-declaration:
    attribute-specifier-seq-opt type-specifier-seq declarator
    attribute-specifier-seq-opt type-specifier-seq abstract-declarator-opt
    ...

noexcept-specifier:
    noexcept ( constant-expression )
    noexcept

preprocessing-file:
    group-opt
    module-file

module-file:
    pp-global-module-fragment-opt pp-module group-opt pp-private-module-fragment-opt

pp-global-module-fragment:
    module ; new-line group-opt

pp-private-module-fragment:
    module : private ; new-line group-opt

group:
    group-part
    group group-part

group-part:
    control-line
    if-section
    text-line
    # conditionally-supported-directive

control-line:
    # include pp-tokens new-line
    pp-import
    # define  identifier replacement-list new-line
    # define  identifier lparen identifier-list-opt ) replacement-list new-line
    # define  identifier lparen ... ) replacement-list new-line
    # define  identifier lparen identifier-list , ... ) replacement-list new-line
    # undef   identifier new-line
    # line    pp-tokens new-line
    # error   pp-tokens-opt new-line
    # pragma  pp-tokens-opt new-line
    # new-line

if-section:
    if-group elif-groups-opt else-group-opt endif-line

if-group:
    # if      constant-expression new-line group-opt
    # ifdef   identifier new-line group-opt
    # ifndef  identifier new-line group-opt

elif-groups:
    elif-group
    elif-groups elif-group

elif-group:
    # elif    constant-expression new-line group-opt

else-group:
    # else    new-line group-opt

endif-line:
    # endif   new-line

text-line:
    pp-tokens-opt new-line

conditionally-supported-directive:
    pp-tokens new-line

lparen:
    a ( character not immediately preceded by white-space

identifier-list:
    identifier
    identifier-list , identifier

replacement-list:
    pp-tokens-opt

pp-tokens:
    preprocessing-token
    pp-tokens preprocessing-token

new-line:
    the new-line character

defined-macro-expression:
    defined identifier
    defined ( identifier )

h-preprocessing-token:
    any preprocessing-token other than >

h-pp-tokens:
    h-preprocessing-token
    h-pp-tokens h-preprocessing-token

header-name-tokens:
    string-literal
    < h-pp-tokens >

has-include-expression:
    __has_include ( header-name )
    __has_include ( header-name-tokens )

has-attribute-expression:
    __has_cpp_attribute ( pp-tokens )

pp-module:
    export-opt module pp-tokens-opt ; new-line

pp-import:
    export-opt import header-name pp-tokens-opt ; new-line
    export-opt import header-name-tokens pp-tokens-opt ; new-line
    export-opt import pp-tokens ; new-line

va-opt-replacement:
    __VA_OPT__ ( pp-tokens-opt )
