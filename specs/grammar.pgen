%token
  eof
, error
, identifier
, character_literal
, floating_point_literal
, integer_literal
, string_literal
, user_defined_literal
, user_defined_string_literal

// operators and punctuators

, exclaim
, exclaim_equal
, percent
, percent_equal
, amp
, amp_amp
, amp_equal
, lparen
, rparen
, star
, star_equal
, plus
, plus_plus
, plus_equal
, comma
, minus
, minus_minus
, minus_equal
, minus_greater
, minus_greater_star
, dot
, dot_star
, dot_dot_dot
, slash
, slash_equal
, colon
, colon_colon
, semicolon
, less
, less_less
, less_less_equal
, less_equal
, less_equal_greater
, equal
, equal_equal
, greater
, greater_equal
, greater_greater
, greater_greater_equal
, question
, lbracket
, rbracket
, caret
, caret_equal
, lbrace
, bar
, bar_equal
, bar_bar
, rbrace
, tilde

// keywords

, __alignof
, __attribute
, __extension__
, __has_unique_object_representations
, __has_virtual_destructor
, __is_abstract
, __is_aggregate
, __is_base_of
, __is_class
, __is_constructible
, __is_convertible_to
, __is_empty
, __is_enum
, __is_final
, __is_function
, __is_literal
, __is_nothrow_assignable
, __is_nothrow_constructible
, __is_pod
, __is_polymorphic
, __is_same
, __is_standard_layout
, __is_trivial
, __is_trivially_assignable
, __is_trivially_constructible
, __is_trivially_copyable
, __is_trivially_destructible
, __is_union
, __reference_binds_to_temporary
, __underlying_type
, _Atomic

, alignas
, alignof
, asm
, auto
, bool
, break
, case
, catch
, char
, char16_t
, char32_t
, char8_t
, class
, co_await
, co_return
, co_yield
, concept
, const
, const_cast
, consteval
, constexpr
, constinit
, continue
, decltype
, default
, delete
, do
, double
, dynamic_cast
, else
, enum
, explicit
, export
, extern
, false
, float
, for
, friend
, goto
, if
, inline
, int
, long
, mutable
, namespace
, new
, noexcept
, nullptr
, operator
, private
, protected
, public
, reinterpret_cast
, requires
, return
, short
, signed
, sizeof
, static
, static_assert
, static_cast
, struct
, switch
, template
, this
, thread_local
, throw
, true
, try
, typedef
, typeid
, typename
, union
, unsigned
, using
, virtual
, void
, volatile
, wchar_t
, while

// special
, header_name
, balanced_token
, export_keyword
, import_keyword
, module_keyword
, final
, override

typedef_name
: identifier
| simple_template_id
;

namespace_name
: identifier
| namespace_alias
;

namespace_alias
: identifier
;

class_name
: identifier
| simple_template_id
;

enum_name
: identifier
;

template_name
: identifier
;

literal
: integer_literal
| character_literal
| floating_point_literal
| string_literal
| boolean_literal
| pointer_literal
| user_defined_literal
;

boolean_literal
: false
| true
;

pointer_literal
: nullptr
;

translation_unit
: declaration*
| global_module_fragment? module_declaration declaration* private_module_fragment?
;

primary_expression
: literal
| this
| lparen expression rparen
| id_expression
| lambda_expression
| fold_expression
| requires_expression
;

id_expression
: unqualified_id
| qualified_id
;

unqualified_id
: identifier
| operator_function_id
| conversion_function_id
| literal_operator_id
| tilde type_name
| tilde decltype_specifier
| template_id
;

qualified_id
: nested_name_specifier template? unqualified_id
;

nested_name_specifier
: colon_colon
| type_name colon_colon
| namespace_name colon_colon
| decltype_specifier colon_colon
| nested_name_specifier identifier colon_colon
| nested_name_specifier template? simple_template_id colon_colon
;

lambda_expression
: lambda_introducer lambda_declarator? compound_statement
| lambda_introducer less template_parameter_list greater requires_clause? lambda_declarator? compound_statement
;

lambda_introducer
: lbracket lambda_capture? rbracket
;

lambda_declarator
: lparen parameter_declaration_clause rparen decl_specifier* noexcept_specifier? attribute_specifier* trailing_return_type? requires_clause?
;

lambda_capture
: capture_default
| capture_list
| capture_default comma capture_list
;

capture_default
: amp
| equal
;

capture_list
: capture
| capture_list comma capture
;

capture
: simple_capture
| init_capture
;

simple_capture
: identifier dot_dot_dot
| amp identifier dot_dot_dot
| this
| star this
;

init_capture
: dot_dot_dot identifier initializer
| amp dot_dot_dot identifier initializer
;

fold_expression
: lparen cast_expression fold_operator dot_dot_dot rparen
| lparen dot_dot_dot fold_operator cast_expression rparen
| lparen cast_expression fold_operator dot_dot_dot fold_operator cast_expression rparen
;

fold_operator
: plus
| minus
| star
| slash
| percent
| caret
| amp
| bar
| less_less
| greater_greater
| plus_equal
| minus_equal
| star_equal
| slash_equal
| percent_equal
| caret_equal
| amp_equal
| bar_equal
| less_less_equal
| greater_greater_equal
| equal
| equal_equal
| exclaim_equal
| less
| greater
| less_equal
| greater_equal
| amp_amp
| bar_bar
| comma
| dot_star
| minus_greater_star
;

requires_expression
: requires requirement_parameter_list? requirement_body
;

requirement_parameter_list
: lparen parameter_declaration_clause? rparen
;

requirement_body
: lbrace requirement+ rbrace
;

requirement
: simple_requirement
| type_requirement
| compound_requirement
| nested_requirement
;

simple_requirement
: expression semicolon
;

type_requirement
: typename nested_name_specifier? type_name semicolon
;

compound_requirement
: lbrace expression rbrace noexcept? return_type_requirement? semicolon
;

return_type_requirement
: minus_greater type_constraint
;

nested_requirement
: requires constraint_expression semicolon
;

postfix_expression
: primary_expression
| postfix_expression lbracket expr_or_braced_init_list rbracket
| postfix_expression lparen expression_list? rparen
| simple_type_specifier lparen expression_list? rparen
| typename_specifier lparen expression_list? rparen
| simple_type_specifier braced_init_list
| typename_specifier braced_init_list
| postfix_expression dot template? id_expression
| postfix_expression minus_greater template? id_expression
| postfix_expression plus_plus
| postfix_expression minus_minus
| dynamic_cast less type_id greater lparen expression rparen
| static_cast less type_id greater lparen expression rparen
| reinterpret_cast less type_id greater lparen expression rparen
| const_cast less type_id greater lparen expression rparen
| typeid lparen expression rparen
| typeid lparen type_id rparen
;

expression_list
: initializer_list
;

unary_expression
: postfix_expression
| unary_operator cast_expression
| plus_plus cast_expression
| minus_minus cast_expression
| await_expression
| sizeof unary_expression
| sizeof lparen type_id rparen
| sizeof dot_dot_dot lparen identifier rparen
| alignof lparen type_id rparen
| noexcept_expression
| new_expression
| delete_expression
;

unary_operator
: star
| amp
| plus
| minus
| exclaim
| tilde
;

await_expression
: co_await cast_expression
;

noexcept_expression
: noexcept lparen expression rparen
;

new_expression
: colon_colon new new_placement? new_type_id new_initializer?
| colon_colon new new_placement? lparen type_id rparen new_initializer?
;

new_placement
: lparen expression_list rparen
;

new_type_id
: type_specifier_seq new_declarator?
;

new_declarator
: ptr_operator new_declarator?
| noptr_new_declarator
;

noptr_new_declarator
: lbracket expression? rbracket attribute_specifier*
| noptr_new_declarator lbracket constant_expression rbracket attribute_specifier*
;

new_initializer
: lparen expression_list? rparen
| braced_init_list
;

delete_expression
: colon_colon delete cast_expression
| colon_colon delete lbracket rbracket cast_expression
;

cast_expression
: unary_expression
| lparen type_id rparen cast_expression
;

pm_expression
: cast_expression
| pm_expression dot_star cast_expression
| pm_expression minus_greater_star cast_expression
;

multiplicative_expression
: pm_expression
| multiplicative_expression star pm_expression
| multiplicative_expression slash pm_expression
| multiplicative_expression percent pm_expression
;

additive_expression
: multiplicative_expression
| additive_expression plus multiplicative_expression
| additive_expression minus multiplicative_expression
;

shift_expression
: additive_expression
| shift_expression less_less additive_expression
| shift_expression greater_greater additive_expression
;

compare_expression
: shift_expression
| compare_expression less_equal_greater shift_expression
;

relational_expression
: compare_expression
| relational_expression less compare_expression
| relational_expression greater compare_expression
| relational_expression less_equal compare_expression
| relational_expression greater_equal compare_expression
;

equality_expression
: relational_expression
| equality_expression equal_equal relational_expression
| equality_expression exclaim_equal relational_expression
;

and_expression
: equality_expression
| and_expression amp equality_expression
;

exclusive_or_expression
: and_expression
| exclusive_or_expression caret and_expression
;

inclusive_or_expression
: exclusive_or_expression
| inclusive_or_expression bar exclusive_or_expression
;

logical_and_expression
: inclusive_or_expression
| logical_and_expression amp_amp inclusive_or_expression
;

logical_or_expression
: logical_and_expression
| logical_or_expression bar_bar logical_and_expression
;

conditional_expression
: logical_or_expression
| logical_or_expression question expression colon assignment_expression
;

yield_expression
: co_yield assignment_expression
| co_yield braced_init_list
;

throw_expression
: throw assignment_expression?
;

assignment_expression
: conditional_expression
| yield_expression
| throw_expression
| logical_or_expression assignment_operator initializer_clause
;

assignment_operator
: equal
| star_equal
| slash_equal
| percent_equal
| plus_equal
| minus_equal
| greater_greater_equal
| less_less_equal
| amp_equal
| caret_equal
| bar_equal
;

expression
: assignment_expression
| expression comma assignment_expression
;

constant_expression
: conditional_expression
;

statement
: labeled_statement
| attribute_specifier* expression_statement
| attribute_specifier* compound_statement
| attribute_specifier* selection_statement
| attribute_specifier* iteration_statement
| attribute_specifier* jump_statement
| declaration_statement
| attribute_specifier* try_block
;

init_statement
: expression_statement
| simple_declaration
;

condition
: expression
| attribute_specifier* decl_specifier_seq declarator brace_or_equal_initializer
;

labeled_statement
: attribute_specifier* identifier colon statement
| attribute_specifier* case constant_expression colon statement
| attribute_specifier* default colon statement
;

expression_statement
: expression? semicolon
;

compound_statement
: lbrace statement* rbrace
;

selection_statement
: if constexpr? lparen init_statement? condition rparen statement
| if constexpr? lparen init_statement? condition rparen statement else statement
| switch lparen init_statement? condition rparen statement
;

iteration_statement
: while lparen condition rparen statement
| do statement while lparen expression rparen semicolon
| for lparen init_statement condition? semicolon expression? rparen statement
| for lparen init_statement? for_range_declaration colon for_range_initializer rparen statement
;

for_range_declaration
: attribute_specifier* decl_specifier_seq declarator
| attribute_specifier* decl_specifier_seq ref_qualifier? lbracket identifier_list rbracket
;

for_range_initializer
: expr_or_braced_init_list
;

jump_statement
: break semicolon
| continue semicolon
| return expr_or_braced_init_list? semicolon
| coroutine_return_statement
| goto identifier semicolon
;

coroutine_return_statement
: co_return expr_or_braced_init_list? semicolon
;

declaration_statement
: block_declaration
;

declaration
: block_declaration
| nodeclspec_function_declaration
| function_definition
| template_declaration
| deduction_guide
| explicit_instantiation
| explicit_specialization
| export_declaration
| linkage_specification
| namespace_definition
| empty_declaration
| attribute_declaration
| module_import_declaration
;

block_declaration
: simple_declaration
| asm_declaration
| namespace_alias_definition
| using_declaration
| using_enum_declaration
| using_directive
| static_assert_declaration
| alias_declaration
| opaque_enum_declaration
;

nodeclspec_function_declaration
: attribute_specifier* declarator semicolon
;

alias_declaration
: using identifier attribute_specifier* equal defining_type_id semicolon
;

simple_declaration
: decl_specifier_seq init_declarator_list? semicolon
| attribute_specifier+ decl_specifier_seq init_declarator_list semicolon
| attribute_specifier* decl_specifier_seq ref_qualifier? lbracket identifier_list rbracket initializer semicolon
;

static_assert_declaration
: static_assert lparen constant_expression rparen semicolon
| static_assert lparen constant_expression comma string_literal rparen semicolon
;

empty_declaration
: semicolon
;

attribute_declaration
: attribute_specifier+ semicolon
;

decl_specifier
: storage_class_specifier
| defining_type_specifier
| function_specifier
| friend
| typedef
| constexpr
| consteval
| constinit
| inline
;

decl_specifier_seq
: (decl_specifier attribute_specifier*)+
;

storage_class_specifier
: static
| thread_local
| extern
| mutable
;

function_specifier
: virtual
| explicit_specifier
;

explicit_specifier
: explicit lparen constant_expression rparen
| explicit
;

type_specifier
: simple_type_specifier
| elaborated_type_specifier
| typename_specifier
| cv_qualifier
;

type_specifier_seq
: (type_specifier attribute_specifier*)+
;

defining_type_specifier
: type_specifier
| class_specifier
| enum_specifier
;

defining_type_specifier_seq
: defining_type_specifier attribute_specifier*
| defining_type_specifier defining_type_specifier_seq
;

simple_type_specifier
: nested_name_specifier? type_name
| nested_name_specifier template simple_template_id
| decltype_specifier
| placeholder_type_specifier
| nested_name_specifier? template_name
| char
| char8_t
| char16_t
| char32_t
| wchar_t
| bool
| short
| int
| long
| signed
| unsigned
| float
| double
| void
;

type_name
: class_name
| enum_name
| typedef_name
;

elaborated_type_specifier
: class_key attribute_specifier* nested_name_specifier? identifier
| class_key simple_template_id
| class_key nested_name_specifier template? simple_template_id
| elaborated_enum_specifier
;

elaborated_enum_specifier
: enum nested_name_specifier? identifier
;

decltype_specifier
: decltype lparen expression rparen
;

placeholder_type_specifier
: type_constraint? auto
| type_constraint? decltype lparen auto rparen
;

init_declarator_list
: init_declarator
| init_declarator_list comma init_declarator
;

init_declarator
: declarator initializer?
| declarator requires_clause
;

declarator
: ptr_declarator
| noptr_declarator parameters_and_qualifiers trailing_return_type
;

ptr_declarator
: noptr_declarator
| ptr_operator ptr_declarator
;

noptr_declarator
: declarator_id attribute_specifier*
| noptr_declarator parameters_and_qualifiers
| noptr_declarator lbracket constant_expression? rbracket attribute_specifier*
| lparen ptr_declarator rparen
;

parameters_and_qualifiers
: lparen parameter_declaration_clause rparen cv_qualifier* ref_qualifier? noexcept_specifier? attribute_specifier*
;

trailing_return_type
: minus_greater type_id
;

ptr_operator
: star attribute_specifier* cv_qualifier*
| amp attribute_specifier*
| amp_amp attribute_specifier*
| nested_name_specifier star attribute_specifier* cv_qualifier*
;

cv_qualifier
: const
| volatile
;

ref_qualifier
: amp
| amp_amp
;

declarator_id
: dot_dot_dot id_expression
;

type_id
: type_specifier_seq abstract_declarator?
;

defining_type_id
: defining_type_specifier_seq abstract_declarator?
;

abstract_declarator
: ptr_abstract_declarator
| noptr_abstract_declarator? parameters_and_qualifiers trailing_return_type
| abstract_pack_declarator
;

ptr_abstract_declarator
: noptr_abstract_declarator
| ptr_operator ptr_abstract_declarator?
;

noptr_abstract_declarator
: noptr_abstract_declarator? parameters_and_qualifiers
| noptr_abstract_declarator? lbracket constant_expression? rbracket attribute_specifier*
| lparen ptr_abstract_declarator rparen
;

abstract_pack_declarator
: noptr_abstract_pack_declarator
| ptr_operator abstract_pack_declarator
;

noptr_abstract_pack_declarator
: noptr_abstract_pack_declarator parameters_and_qualifiers
| noptr_abstract_pack_declarator lbracket constant_expression? rbracket attribute_specifier*
| dot_dot_dot
;

parameter_declaration_clause
: parameter_declaration_list? dot_dot_dot
| parameter_declaration_list comma dot_dot_dot
;

parameter_declaration_list
: parameter_declaration
| parameter_declaration_list comma parameter_declaration
;

parameter_declaration
: attribute_specifier* decl_specifier_seq declarator
| attribute_specifier* decl_specifier_seq declarator equal initializer_clause
| attribute_specifier* decl_specifier_seq abstract_declarator?
| attribute_specifier* decl_specifier_seq abstract_declarator? equal initializer_clause
;

initializer
: brace_or_equal_initializer
| lparen expression_list rparen
;

brace_or_equal_initializer
: equal initializer_clause
| braced_init_list
;

initializer_clause
: assignment_expression
| braced_init_list
;

braced_init_list
: lbrace initializer_list comma rbrace
| lbrace designated_initializer_list comma rbrace
| lbrace rbrace
;

initializer_list
: initializer_clause dot_dot_dot
| initializer_list comma initializer_clause dot_dot_dot
;

designated_initializer_list
: designated_initializer_clause
| designated_initializer_list comma designated_initializer_clause
;

designated_initializer_clause
: designator brace_or_equal_initializer
;

designator
: dot identifier
;

expr_or_braced_init_list
: expression
| braced_init_list
;

function_definition
: attribute_specifier* decl_specifier* declarator virt_specifier* function_body
| attribute_specifier* decl_specifier* declarator requires_clause function_body
;

function_body
: ctor_initializer? compound_statement
| function_try_block
| equal default semicolon
| equal delete semicolon
;

enum_specifier
: enum_head lbrace enumerator_list? rbrace
| enum_head lbrace enumerator_list comma rbrace
;

enum_head
: enum_key attribute_specifier* enum_head_name? enum_base?
;

enum_head_name
: nested_name_specifier? identifier
;

opaque_enum_declaration
: enum_key attribute_specifier* enum_head_name enum_base? semicolon
;

enum_key
: enum
| enum class
| enum struct
;

enum_base
: colon type_specifier_seq
;

enumerator_list
: enumerator_definition
| enumerator_list comma enumerator_definition
;

enumerator_definition
: enumerator
| enumerator equal constant_expression
;

enumerator
: identifier attribute_specifier*
;

using_enum_declaration
: using elaborated_enum_specifier semicolon
;

namespace_definition
: named_namespace_definition
| unnamed_namespace_definition
| nested_namespace_definition
;

named_namespace_definition
: inline? namespace attribute_specifier* identifier lbrace namespace_body rbrace
;

unnamed_namespace_definition
: inline? namespace attribute_specifier* lbrace namespace_body rbrace
;

nested_namespace_definition
: namespace enclosing_namespace_specifier colon_colon inline? identifier lbrace namespace_body rbrace
;

enclosing_namespace_specifier
: identifier
| enclosing_namespace_specifier colon_colon inline? identifier
;

namespace_body
: declaration*
;

namespace_alias_definition
: namespace identifier equal qualified_namespace_specifier semicolon
;

qualified_namespace_specifier
: nested_name_specifier? namespace_name
;

using_directive
: attribute_specifier* using namespace nested_name_specifier? namespace_name semicolon
;

using_declaration
: using using_declarator_list semicolon
;

using_declarator_list
: using_declarator dot_dot_dot
| using_declarator_list comma using_declarator dot_dot_dot
;

using_declarator
: typename? nested_name_specifier unqualified_id
;

asm_declaration
: attribute_specifier* asm lparen string_literal rparen semicolon
;

linkage_specification
: extern string_literal lbrace declaration* rbrace
| extern string_literal declaration
;

attribute_specifier
: lbracket lbracket attribute_using_prefix? attribute_list rbracket rbracket
| alignment_specifier
;

alignment_specifier
: alignas lparen type_id dot_dot_dot rparen
| alignas lparen constant_expression dot_dot_dot rparen
;

attribute_using_prefix
: using attribute_namespace colon
;

attribute_list
: attribute?
| attribute_list comma attribute?
| attribute dot_dot_dot
| attribute_list comma attribute dot_dot_dot
;

attribute
: attribute_token attribute_argument_clause?
;

attribute_token
: identifier
| attribute_scoped_token
;

attribute_scoped_token
: attribute_namespace colon_colon identifier
;

attribute_namespace
: identifier
;

attribute_argument_clause
: lparen balanced_token* rparen
;

module_declaration
: export_keyword? module_keyword module_name module_partition? attribute_specifier* semicolon
;

module_name
: module_name_qualifier? identifier
;

module_partition
: colon module_name_qualifier? identifier
;

module_name_qualifier
: identifier dot
| module_name_qualifier identifier dot
;

export_declaration
: export declaration
| export lbrace declaration* rbrace
| export_keyword module_import_declaration
;

module_import_declaration
: import_keyword module_name attribute_specifier* semicolon
| import_keyword module_partition attribute_specifier* semicolon
| import_keyword header_name attribute_specifier* semicolon
;

global_module_fragment
: module_keyword semicolon declaration*
;

private_module_fragment
: module_keyword colon private semicolon declaration*
;

class_specifier
: class_head lbrace member_specification? rbrace
;

class_head
: class_key attribute_specifier* class_head_name class_virt_specifier? base_clause?
| class_key attribute_specifier* base_clause?
;

class_head_name
: nested_name_specifier? class_name
;

class_virt_specifier
: final
;

class_key
: class
| struct
| union
;

member_specification
: member_declaration member_specification?
| access_specifier colon member_specification?
;

member_declaration
: attribute_specifier* decl_specifier* member_declarator_list? semicolon
| function_definition
| using_declaration
| using_enum_declaration
| static_assert_declaration
| template_declaration
| explicit_specialization
| deduction_guide
| alias_declaration
| opaque_enum_declaration
| empty_declaration
;

member_declarator_list
: member_declarator
| member_declarator_list comma member_declarator
;

member_declarator
: declarator virt_specifier* pure_specifier?
| declarator requires_clause
| declarator brace_or_equal_initializer?
| identifier? attribute_specifier* colon constant_expression brace_or_equal_initializer?
;

virt_specifier
: override
| final
;

pure_specifier
: equal integer_literal
;

conversion_function_id
: operator conversion_type_id
;

conversion_type_id
: type_specifier_seq conversion_declarator?
;

conversion_declarator
: ptr_operator conversion_declarator?
;

base_clause
: colon base_specifier_list
;

base_specifier_list
: base_specifier dot_dot_dot
| base_specifier_list comma base_specifier dot_dot_dot
;

base_specifier
: attribute_specifier* class_or_decltype
| attribute_specifier* virtual access_specifier? class_or_decltype
| attribute_specifier* access_specifier virtual? class_or_decltype
;

class_or_decltype
: nested_name_specifier? type_name
| nested_name_specifier template simple_template_id
| decltype_specifier
;

access_specifier
: private
| protected
| public
;

ctor_initializer
: colon mem_initializer_list
;

mem_initializer_list
: mem_initializer dot_dot_dot
| mem_initializer_list comma mem_initializer dot_dot_dot
;

mem_initializer
: mem_initializer_id lparen expression_list? rparen
| mem_initializer_id braced_init_list
;

mem_initializer_id
: class_or_decltype
| identifier
;

operator_function_id
: operator op
;

op
: new
| delete
| new lbracket rbracket
| delete lbracket rbracket
| co_await
| lparen rparen
| lbracket rbracket
| minus_greater
| minus_greater_star
| tilde
| exclaim
| plus
| minus
| star
| slash
| percent
| caret
| amp
| bar
| equal
| plus_equal
| minus_equal
| star_equal
| slash_equal
| percent_equal
| caret_equal
| amp_equal
| bar_equal
| equal_equal
| exclaim_equal
| less
| greater
| less_equal
| greater_equal
| less_equal_greater
| amp_amp
| bar_bar
| less_less
| greater_greater
| less_less_equal
| greater_greater_equal
| plus_plus
| minus_minus
| comma
;

literal_operator_id
: operator string_literal identifier
| operator user_defined_string_literal
;

template_declaration
: template_head declaration
| template_head concept_definition
;

template_head
: template less template_parameter_list greater requires_clause?
;

template_parameter_list
: template_parameter
| template_parameter_list comma template_parameter
;

requires_clause
: requires constraint_logical_or_expression
;

constraint_logical_or_expression
: constraint_logical_and_expression
| constraint_logical_or_expression bar_bar constraint_logical_and_expression
;

constraint_logical_and_expression
: primary_expression
| constraint_logical_and_expression amp_amp primary_expression
;

template_parameter
: type_parameter
| parameter_declaration
;

type_parameter
: type_parameter_key dot_dot_dot identifier?
| type_parameter_key identifier? equal type_id
| type_constraint dot_dot_dot identifier?
| type_constraint identifier? equal type_id
| template_head type_parameter_key dot_dot_dot identifier?
| template_head type_parameter_key identifier? equal id_expression
;

type_parameter_key
: class
| typename
;

type_constraint
: nested_name_specifier? concept_name
| nested_name_specifier? concept_name less template_argument_list? greater
;

simple_template_id
: template_name less template_argument_list? greater
;

template_id
: simple_template_id
| operator_function_id less template_argument_list? greater
| literal_operator_id less template_argument_list? greater
;

template_argument_list
: template_argument dot_dot_dot
| template_argument_list comma template_argument dot_dot_dot
;

template_argument
: constant_expression
| type_id
| id_expression
;

constraint_expression
: logical_or_expression
;

deduction_guide
: explicit_specifier? template_name lparen parameter_declaration_clause rparen minus_greater simple_template_id semicolon
;

concept_definition
: concept concept_name equal constraint_expression semicolon
;

concept_name
: identifier
;

typename_specifier
: typename nested_name_specifier identifier
| typename nested_name_specifier template? simple_template_id
;

explicit_instantiation
: extern? template declaration
;

explicit_specialization
: template less greater declaration
;

try_block
: try compound_statement handler+
;

function_try_block
: try ctor_initializer? compound_statement handler+
;

handler
: catch lparen exception_declaration rparen compound_statement
;

exception_declaration
: attribute_specifier* type_specifier_seq declarator
| attribute_specifier* type_specifier_seq abstract_declarator?
| dot_dot_dot
;

noexcept_specifier
: noexcept lparen constant_expression rparen
| noexcept
;

identifier_list
: identifier
| identifier_list comma identifier
;

