name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install unit tests requirements
        run: |
          pip install -r tests/unit_tests/requirements.txt

      - name: Build
        run: |
          cmake . \
            -Bbuild \
            -DCMAKE_BUILD_TYPE=Release

          cmake --build build

      - name: Test
        working-directory: build
        run: |
          ctest --verbose

  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install unit tests requirements
        run: |
          pip install -r tests\unit_tests\requirements.txt

      - name: Build
        run: |
          cmake . -Bbuild

          cmake --build build --config Release

      - name: Test
        working-directory: build
        run: |
          ctest --verbose -C Release

  build-emscripten:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Build
        working-directory: packages/cxx-frontend
        run: |
          npm ci
          npm run build
          npm pack

      - name: Test
        working-directory: packages/cxx-frontend/examples
        run: |
          node dump.mjs

  build-macos:
    runs-on: macos-12

    steps:
      - uses: actions/checkout@v3

      - name: Install unit tests requirements
        run: |
          python3 -m venv .env
          . .env/bin/activate
          pip install -r tests/unit_tests/requirements.txt

      - name: Build
        run: |
          . .env/bin/activate

          cmake . \
            -Bbuild \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DLLVM_ROOT=$(brew --prefix llvm)

          cmake --build build

      - name: Test
        working-directory: build
        run: |
          ctest --verbose

  build-wasi:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Build
        run: |
          docker build -t cxx-wasi -f Dockerfile.wasi .
          mkdir -p out
          docker run --rm -v $PWD/out:/out cxx-wasi cp /app/build.wasi/src/frontend/cxx.wasm /out/cxx.wasm

      - name: Test
        run: |
          curl https://wasmtime.dev/install.sh -sSf | bash

          ~/.wasmtime/bin/wasmtime out/cxx.wasm -- --help
