// Copyright (c) 2024 Roberto Raggi <roberto.raggi@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

export enum ASTSlot {
  accessLoc = 0,
  accessOp = 1,
  accessSpecifier = 2,
  alignasLoc = 3,
  alignofLoc = 4,
  ampLoc = 5,
  arrowLoc = 6,
  asmLoc = 7,
  asmQualifierList = 8,
  atomicLoc = 9,
  attributeArgumentClause = 10,
  attributeList = 11,
  attributeLoc = 12,
  attributeNamespace = 13,
  attributeNamespaceLoc = 14,
  attributeToken = 15,
  attributeUsingPrefix = 16,
  autoLoc = 17,
  awaitLoc = 18,
  baseExpression = 19,
  baseSpecifierList = 20,
  bindingList = 21,
  bracedInitList = 22,
  breakLoc = 23,
  captureDefault = 24,
  captureDefaultLoc = 25,
  captureList = 26,
  caretLoc = 27,
  caseLoc = 28,
  castLoc = 29,
  catchLoc = 30,
  classKey = 31,
  classKeyLoc = 32,
  classLoc = 33,
  clobberList = 34,
  closeLoc = 35,
  colonLoc = 36,
  commaLoc = 37,
  complexLoc = 38,
  conceptLoc = 39,
  condition = 40,
  constLoc = 41,
  constevalLoc = 42,
  constexprLoc = 43,
  constinitLoc = 44,
  constraintLiteral = 45,
  constraintLiteralLoc = 46,
  constvalLoc = 47,
  continueLoc = 48,
  coreDeclarator = 49,
  coreturnLoc = 50,
  cvQualifierList = 51,
  declSpecifierList = 52,
  declaration = 53,
  declarationList = 54,
  declarator = 55,
  declaratorChunkList = 56,
  decltypeLoc = 57,
  decltypeSpecifier = 58,
  defaultLoc = 59,
  deleteLoc = 60,
  doLoc = 61,
  dotLoc = 62,
  ellipsisLoc = 63,
  elseLoc = 64,
  elseStatement = 65,
  emicolonLoc = 66,
  enumLoc = 67,
  enumTypeSpecifier = 68,
  enumeratorList = 69,
  equalLoc = 70,
  exceptionDeclaration = 71,
  exceptionSpecifier = 72,
  exclaimLoc = 73,
  explicitLoc = 74,
  explicitSpecifier = 75,
  exportLoc = 76,
  expression = 77,
  expressionList = 78,
  externLoc = 79,
  extraAttributeList = 80,
  finalLoc = 81,
  foldOp = 82,
  foldOpLoc = 83,
  forLoc = 84,
  friendLoc = 85,
  functionBody = 86,
  globalModuleFragment = 87,
  gnuAtributeList = 88,
  gotoLabelList = 89,
  gotoLoc = 90,
  greaterLoc = 91,
  handlerList = 92,
  headerLoc = 93,
  id = 94,
  idExpression = 95,
  identifier = 96,
  identifierLoc = 97,
  ifLoc = 98,
  iffalseExpression = 99,
  iftrueExpression = 100,
  importLoc = 101,
  importName = 102,
  indexExpression = 103,
  initDeclaratorList = 104,
  initializer = 105,
  inlineLoc = 106,
  inputOperandList = 107,
  isFinal = 108,
  isInline = 109,
  isNot = 110,
  isOverride = 111,
  isPack = 112,
  isPure = 113,
  isTemplateIntroduced = 114,
  isThisIntroduced = 115,
  isTrue = 116,
  isVariadic = 117,
  isVirtual = 118,
  lambdaSpecifierList = 119,
  lbraceLoc = 120,
  lbracket2Loc = 121,
  lbracketLoc = 122,
  leftExpression = 123,
  lessLoc = 124,
  literal = 125,
  literalLoc = 126,
  literalOperatorId = 127,
  lparen2Loc = 128,
  lparenLoc = 129,
  memInitializerList = 130,
  minusGreaterLoc = 131,
  moduleDeclaration = 132,
  moduleLoc = 133,
  moduleName = 134,
  modulePartition = 135,
  moduleQualifier = 136,
  mutableLoc = 137,
  namespaceLoc = 138,
  nestedNameSpecifier = 139,
  nestedNamespaceSpecifierList = 140,
  newInitalizer = 141,
  newLoc = 142,
  newPlacement = 143,
  noexceptLoc = 144,
  op = 145,
  opLoc = 146,
  openLoc = 147,
  operatorFunctionId = 148,
  operatorLoc = 149,
  outputOperandList = 150,
  parameterDeclarationClause = 151,
  parameterDeclarationList = 152,
  privateLoc = 153,
  privateModuleFragment = 154,
  ptrOpList = 155,
  qualifier = 156,
  qualifierLoc = 157,
  questionLoc = 158,
  rangeDeclaration = 159,
  rangeInitializer = 160,
  rbraceLoc = 161,
  rbracket2Loc = 162,
  rbracketLoc = 163,
  refLoc = 164,
  refOp = 165,
  refQualifierLoc = 166,
  requirementList = 167,
  requiresClause = 168,
  requiresLoc = 169,
  restrictLoc = 170,
  returnLoc = 171,
  rightExpression = 172,
  rparen2Loc = 173,
  rparenLoc = 174,
  scopeLoc = 175,
  secondColonLoc = 176,
  semicolonLoc = 177,
  sizeExpression = 178,
  sizeofLoc = 179,
  specifier = 180,
  specifierLoc = 181,
  splicer = 182,
  starLoc = 183,
  statement = 184,
  statementList = 185,
  staticAssertLoc = 186,
  staticLoc = 187,
  stringLiteral = 188,
  stringliteralLoc = 189,
  switchLoc = 190,
  symbolicName = 191,
  symbolicNameLoc = 192,
  templateArgumentList = 193,
  templateId = 194,
  templateLoc = 195,
  templateParameterList = 196,
  templateRequiresClause = 197,
  thisLoc = 198,
  threadLoc = 199,
  threadLocalLoc = 200,
  throwLoc = 201,
  tildeLoc = 202,
  trailingReturnType = 203,
  tryLoc = 204,
  typeConstraint = 205,
  typeId = 206,
  typeIdList = 207,
  typeLoc = 208,
  typeSpecifier = 209,
  typeSpecifierList = 210,
  typeTraitsLoc = 211,
  typedefLoc = 212,
  typeidLoc = 213,
  typenameLoc = 214,
  underlyingTypeLoc = 215,
  unqualifiedId = 216,
  usingDeclaratorList = 217,
  usingLoc = 218,
  vaArgLoc = 219,
  virtualLoc = 220,
  voidLoc = 221,
  volatileLoc = 222,
  whileLoc = 223,
  yieldLoc = 224,
}
