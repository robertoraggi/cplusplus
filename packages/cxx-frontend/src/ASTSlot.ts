// Copyright (c) 2023 Roberto Raggi <roberto.raggi@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

export enum ASTSlot {
  accessLoc = 0,
  accessOp = 1,
  accessSpecifier = 2,
  alignasLoc = 3,
  alignofLoc = 4,
  ampLoc = 5,
  arrowLoc = 6,
  asmLoc = 7,
  asmQualifierList = 8,
  atomicLoc = 9,
  attributeArgumentClause = 10,
  attributeList = 11,
  attributeLoc = 12,
  attributeNamespace = 13,
  attributeNamespaceLoc = 14,
  attributeToken = 15,
  attributeUsingPrefix = 16,
  autoLoc = 17,
  awaitLoc = 18,
  baseClause = 19,
  baseExpression = 20,
  baseSpecifierList = 21,
  bindingList = 22,
  bracedInitList = 23,
  breakLoc = 24,
  captureDefaultLoc = 25,
  captureList = 26,
  caseLoc = 27,
  castLoc = 28,
  catchLoc = 29,
  classKey = 30,
  classKeyLoc = 31,
  classLoc = 32,
  clobberList = 33,
  closeLoc = 34,
  colonLoc = 35,
  commaLoc = 36,
  complexLoc = 37,
  conceptLoc = 38,
  condition = 39,
  constLoc = 40,
  constevalLoc = 41,
  constexprLoc = 42,
  constinitLoc = 43,
  constraintLiteral = 44,
  constraintLiteralLoc = 45,
  constvalLoc = 46,
  continueLoc = 47,
  coreDeclarator = 48,
  coreturnLoc = 49,
  ctorInitializer = 50,
  cvQualifierList = 51,
  declSpecifierList = 52,
  declaration = 53,
  declarationList = 54,
  declarator = 55,
  declaratorChunkList = 56,
  declaratorId = 57,
  decltypeLoc = 58,
  decltypeSpecifier = 59,
  defaultLoc = 60,
  deleteLoc = 61,
  designator = 62,
  doLoc = 63,
  dotLoc = 64,
  ellipsisLoc = 65,
  elseLoc = 66,
  elseStatement = 67,
  emicolonLoc = 68,
  enumBase = 69,
  enumLoc = 70,
  enumTypeSpecifier = 71,
  enumeratorList = 72,
  equalLoc = 73,
  exceptionDeclaration = 74,
  exceptionSpecifier = 75,
  exclaimLoc = 76,
  explicitLoc = 77,
  explicitSpecifier = 78,
  exportLoc = 79,
  expression = 80,
  expressionList = 81,
  externLoc = 82,
  extraAttributeList = 83,
  finalLoc = 84,
  foldOp = 85,
  foldOpLoc = 86,
  forLoc = 87,
  friendLoc = 88,
  functionBody = 89,
  globalModuleFragment = 90,
  gotoLabelList = 91,
  gotoLoc = 92,
  greaterLoc = 93,
  handlerList = 94,
  headerLoc = 95,
  id = 96,
  idExpression = 97,
  identifier = 98,
  identifierLoc = 99,
  ifLoc = 100,
  iffalseExpression = 101,
  iftrueExpression = 102,
  importLoc = 103,
  importName = 104,
  indexExpression = 105,
  initDeclaratorList = 106,
  initializer = 107,
  inlineLoc = 108,
  inputOperandList = 109,
  isFinal = 110,
  isInline = 111,
  isNot = 112,
  isOverride = 113,
  isPack = 114,
  isPure = 115,
  isTemplateIntroduced = 116,
  isThisIntroduced = 117,
  isTrue = 118,
  isVariadic = 119,
  isVirtual = 120,
  lambdaDeclarator = 121,
  lambdaIntroducer = 122,
  lambdaSpecifierList = 123,
  lbraceLoc = 124,
  lbracket2Loc = 125,
  lbracketLoc = 126,
  leftExpression = 127,
  lessLoc = 128,
  literal = 129,
  literalLoc = 130,
  literalOperatorId = 131,
  lparen2Loc = 132,
  lparenLoc = 133,
  memInitializerList = 134,
  memberId = 135,
  minusGreaterLoc = 136,
  moduleDeclaration = 137,
  moduleLoc = 138,
  moduleName = 139,
  modulePartition = 140,
  moduleQualifier = 141,
  mutableLoc = 142,
  namespaceLoc = 143,
  nestedNameSpecifier = 144,
  nestedNamespaceSpecifierList = 145,
  newDeclarator = 146,
  newInitalizer = 147,
  newLoc = 148,
  newPlacement = 149,
  noexceptLoc = 150,
  op = 151,
  opLoc = 152,
  openLoc = 153,
  operatorFunctionId = 154,
  operatorLoc = 155,
  outputOperandList = 156,
  parameterDeclarationClause = 157,
  parameterDeclarationList = 158,
  parametersAndQualifiers = 159,
  privateLoc = 160,
  privateModuleFragment = 161,
  ptrOpList = 162,
  qualifier = 163,
  qualifierLoc = 164,
  questionLoc = 165,
  rangeDeclaration = 166,
  rangeInitializer = 167,
  rbraceLoc = 168,
  rbracket2Loc = 169,
  rbracketLoc = 170,
  refLoc = 171,
  refOp = 172,
  refQualifierLoc = 173,
  requirementBody = 174,
  requirementList = 175,
  requiresClause = 176,
  requiresLoc = 177,
  restrictLoc = 178,
  returnLoc = 179,
  rightExpression = 180,
  rparen2Loc = 181,
  rparenLoc = 182,
  scopeLoc = 183,
  semicolonLoc = 184,
  sizeExpression = 185,
  sizeofLoc = 186,
  specifier = 187,
  specifierLoc = 188,
  starLoc = 189,
  statement = 190,
  statementList = 191,
  staticAssertLoc = 192,
  staticLoc = 193,
  stringLiteral = 194,
  stringliteralLoc = 195,
  switchLoc = 196,
  symbolicName = 197,
  symbolicNameLoc = 198,
  templateArgumentList = 199,
  templateId = 200,
  templateLoc = 201,
  templateParameterList = 202,
  thisLoc = 203,
  threadLoc = 204,
  threadLocalLoc = 205,
  throwLoc = 206,
  tildeLoc = 207,
  trailingReturnType = 208,
  tryLoc = 209,
  typeConstraint = 210,
  typeId = 211,
  typeIdList = 212,
  typeSpecifier = 213,
  typeSpecifierList = 214,
  typeTraits = 215,
  typeTraitsLoc = 216,
  typedefLoc = 217,
  typeidLoc = 218,
  typenameLoc = 219,
  underlyingTypeLoc = 220,
  unqualifiedId = 221,
  usingDeclaratorList = 222,
  usingLoc = 223,
  virtualLoc = 224,
  voidLoc = 225,
  volatileLoc = 226,
  whileLoc = 227,
  yieldLoc = 228,
}
