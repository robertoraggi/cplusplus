// Copyright (c) 2023 Roberto Raggi <roberto.raggi@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

export enum ASTSlot {
  accessLoc = 0,
  accessOp = 1,
  accessSpecifier = 2,
  alignasLoc = 3,
  alignofLoc = 4,
  ampLoc = 5,
  arrowLoc = 6,
  asmLoc = 7,
  atomicLoc = 8,
  attributeArgumentClause = 9,
  attributeList = 10,
  attributeLoc = 11,
  attributeNamespace = 12,
  attributeNamespaceLoc = 13,
  attributeToken = 14,
  attributeUsingPrefix = 15,
  autoLoc = 16,
  awaitLoc = 17,
  baseClause = 18,
  baseExpression = 19,
  baseSpecifierList = 20,
  bindingList = 21,
  bracedInitList = 22,
  breakLoc = 23,
  captureDefaultLoc = 24,
  captureList = 25,
  caseLoc = 26,
  castLoc = 27,
  catchLoc = 28,
  classKey = 29,
  classKeyLoc = 30,
  classLoc = 31,
  closeLoc = 32,
  colonLoc = 33,
  commaLoc = 34,
  complexLoc = 35,
  conceptLoc = 36,
  condition = 37,
  constLoc = 38,
  constevalLoc = 39,
  constexprLoc = 40,
  constinitLoc = 41,
  constvalLoc = 42,
  continueLoc = 43,
  coreDeclarator = 44,
  coreturnLoc = 45,
  ctorInitializer = 46,
  cvQualifierList = 47,
  declSpecifierList = 48,
  declaration = 49,
  declarationList = 50,
  declarator = 51,
  declaratorChunkList = 52,
  declaratorId = 53,
  decltypeLoc = 54,
  decltypeSpecifier = 55,
  defaultLoc = 56,
  deleteLoc = 57,
  designator = 58,
  doLoc = 59,
  dotLoc = 60,
  ellipsisLoc = 61,
  elseLoc = 62,
  elseStatement = 63,
  emicolonLoc = 64,
  enumBase = 65,
  enumLoc = 66,
  enumTypeSpecifier = 67,
  enumeratorList = 68,
  equalLoc = 69,
  exceptionDeclaration = 70,
  exceptionSpecifier = 71,
  exclaimLoc = 72,
  explicitLoc = 73,
  explicitSpecifier = 74,
  exportLoc = 75,
  expression = 76,
  expressionList = 77,
  externLoc = 78,
  extraAttributeList = 79,
  finalLoc = 80,
  foldOp = 81,
  foldOpLoc = 82,
  forLoc = 83,
  friendLoc = 84,
  functionBody = 85,
  globalModuleFragment = 86,
  gotoLoc = 87,
  greaterLoc = 88,
  handlerList = 89,
  headerLoc = 90,
  id = 91,
  idExpression = 92,
  identifier = 93,
  identifierLoc = 94,
  ifLoc = 95,
  iffalseExpression = 96,
  iftrueExpression = 97,
  importLoc = 98,
  importName = 99,
  indexExpression = 100,
  initDeclaratorList = 101,
  initializer = 102,
  inlineLoc = 103,
  isFinal = 104,
  isInline = 105,
  isNot = 106,
  isOverride = 107,
  isPack = 108,
  isPure = 109,
  isTemplateIntroduced = 110,
  isThisIntroduced = 111,
  isTrue = 112,
  isVariadic = 113,
  isVirtual = 114,
  lambdaDeclarator = 115,
  lambdaIntroducer = 116,
  lambdaSpecifierList = 117,
  lbraceLoc = 118,
  lbracket2Loc = 119,
  lbracketLoc = 120,
  leftExpression = 121,
  lessLoc = 122,
  literal = 123,
  literalLoc = 124,
  literalOperatorId = 125,
  lparen2Loc = 126,
  lparenLoc = 127,
  memInitializerList = 128,
  memberId = 129,
  minusGreaterLoc = 130,
  moduleDeclaration = 131,
  moduleLoc = 132,
  moduleName = 133,
  modulePartition = 134,
  moduleQualifier = 135,
  mutableLoc = 136,
  namespaceLoc = 137,
  nestedNameSpecifier = 138,
  nestedNamespaceSpecifierList = 139,
  newDeclarator = 140,
  newInitalizer = 141,
  newLoc = 142,
  newPlacement = 143,
  noexceptLoc = 144,
  op = 145,
  opLoc = 146,
  openLoc = 147,
  operatorFunctionId = 148,
  operatorLoc = 149,
  parameterDeclarationClause = 150,
  parameterDeclarationList = 151,
  parametersAndQualifiers = 152,
  privateLoc = 153,
  privateModuleFragment = 154,
  ptrOpList = 155,
  questionLoc = 156,
  rangeDeclaration = 157,
  rangeInitializer = 158,
  rbraceLoc = 159,
  rbracket2Loc = 160,
  rbracketLoc = 161,
  refLoc = 162,
  refOp = 163,
  refQualifierLoc = 164,
  requirementBody = 165,
  requirementList = 166,
  requiresClause = 167,
  requiresLoc = 168,
  restrictLoc = 169,
  returnLoc = 170,
  rightExpression = 171,
  rparen2Loc = 172,
  rparenLoc = 173,
  scopeLoc = 174,
  semicolonLoc = 175,
  sizeExpression = 176,
  sizeofLoc = 177,
  specifier = 178,
  specifierLoc = 179,
  starLoc = 180,
  statement = 181,
  statementList = 182,
  staticAssertLoc = 183,
  staticLoc = 184,
  stringLiteral = 185,
  stringliteralLoc = 186,
  switchLoc = 187,
  templateArgumentList = 188,
  templateId = 189,
  templateLoc = 190,
  templateParameterList = 191,
  thisLoc = 192,
  threadLoc = 193,
  threadLocalLoc = 194,
  throwLoc = 195,
  tildeLoc = 196,
  trailingReturnType = 197,
  tryLoc = 198,
  typeConstraint = 199,
  typeId = 200,
  typeIdList = 201,
  typeSpecifier = 202,
  typeSpecifierList = 203,
  typeTraits = 204,
  typeTraitsLoc = 205,
  typedefLoc = 206,
  typeidLoc = 207,
  typenameLoc = 208,
  underlyingTypeLoc = 209,
  unqualifiedId = 210,
  usingDeclaratorList = 211,
  usingLoc = 212,
  virtualLoc = 213,
  voidLoc = 214,
  volatileLoc = 215,
  whileLoc = 216,
  yieldLoc = 217,
}
